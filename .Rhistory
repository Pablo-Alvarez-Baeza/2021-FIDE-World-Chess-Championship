mutate(score = as.numeric(case_when(response == "Not applicable to my responsibilities or day-to-day work" ~ 0,
response == "Not Proficient" ~ 0,
response == "Somewhat Proficient" ~ 1,
response == "Strongly Proficient" ~ 2)),
name = gsub("@.*","", email),
name = str_to_title(str_replace(name, "[.]", " ")),
email = tolower(email),
start_time = as.integer(start_time),
end_time = as.integer(end_time),
start_time = as.Date(start_time, origin = "1899-12-30"),
end_time = as.Date(end_time, origin = "1899-12-30"),
question = str_remove_all(question, "[_a-zA-Z]"),
question = as.numeric(question),
category = case_when(question <= 8 ~ "Account Management",
question > 8 & question <= 20 ~ "Consultancy and Marketing Strategy",
question > 20 & question <= 31 ~ "Operations Management",
question > 31 & question <= 41 ~ "Community Management",
question > 41 & question <= 47 ~ "Creative and Content Production",
question > 47 & question <= 53 ~ "Financial Management"),
items = case_when(category == "Account Management" ~ 8,
category == "Consultancy and Marketing Strategy" ~ 12,
category == "Operations Management" ~ 11,
category == "Community Management" ~ 10,
category == "Creative and Content Production" ~ 6,
category == "Financial Management" ~ 6)) |>
relocate(name, .after = email)
# Select emails by latest date
latest_date <- df_score |>
group_by(email) |>
summarize(start_time = max(start_time))
# df score filtered
df_score <- semi_join(df_score, latest_date)
# Question dataframe
df_questions <- raw_file |>
row_to_names(row_number = 1) |>
clean_names() |>
select(question = question_number, statement = question) |>
mutate(question = as.numeric(question)) |>
filter(question <=53)
# Combined dataframe
df <- left_join(df_score, df_questions, by = "question")
# SF file
file_filezilla <- read.csv("switchusers_13122021.csv") |>
filter(SwitchAccess != "FALSE",
empid != "",
Licence %in% c("MSOL:MCI_P1", "MSOL:MCI_P2", "MSOL:MCI_P3","MSOL:MCI_P4")) |>
clean_names() |>
unite("name",  first_name:last_name, remove = TRUE, sep = " ") |>
select(empid, name, email = user_principal_name,
email2 = mail, entrydate, office, company, country_description,
city = l, grade, manager) |>
mutate(empid = as.character(empid),
name = str_to_title(name),
email = tolower(email),
email2 = tolower(email2),
entrydate = dmy(entrydate),
manager = str_to_title(str_replace_all(manager, "[.]", " "))) |>
pivot_longer(cols = c(email, email2), names_to = NULL, values_to = "email") |>
mutate(email = tolower(email),
country_description = factor(str_to_title(country_description)),
grade = factor(case_when(grade %in% c("", "LX") ~ " Unknown",
grade %in% c("G0", "L0") ~ "0",
grade %in% c("G1", "L1") ~ "1",
grade %in% c("G2", "L2") ~ "2",
grade %in% c("G3", "L3") ~ "3",
grade %in% c("G4", "L4") ~ "4",
grade %in% c("G5", "L5") ~ "5",
grade %in% c("G6", "L6") ~ "6",
grade %in% c("G7", "L7") ~ "7",
grade %in% c("G8", "L8") ~ "8",
grade %in% c("G9", "L9") ~ "9")),
office = factor(case_when(office == "ARE_BUE_MC1" ~ "ARG_BUE_MC1",
TRUE ~ office)),
city = factor(case_when(office == "SWE_STO_MC1" ~ "Stockholm",
office %in% c("DEU_DUS_MC1", "DEU_DUS_HG1") ~ "Düsseldorf",
office == "USA_DAL_MC1" ~ "Dallas",
office == "ESP_MAD_MC1" ~ "Madrid",
office %in% c("BEL_BRU_MC1", "BEL_BRU_LO1",
"BEL_BRU_MN1") ~ "Brussels",
office == "NLD_AMS_MC1" ~ "Amsterdam",
office == "IND_BLR_MC1" ~ "Bangalore",
office == "FRA_PAR_MC1" ~ "Paris",
office == "DEU_HAM_MC1" ~ "Hamburg",
office == "AUS_SYD_MC1" ~ "Sydney",
office == "BRA_RIO_MC1" ~ "Rio de Janeiro",
office == "IND_BOM_MC1" ~ "Mumbai",
office == "DEU_BER_MC1" ~ "Berlin",
office == "DEU_MUC_MC1" ~ "Munich",
office == "CHE_ZRH_MC1" ~ "Zürich",
office == "CAN_YVR_MC1" ~ "Vancouver",
office == "USA_BWI_MC1" ~ "Baltimore",
office == "ARG_BUE_MC1" ~ "Buenos Aires",
office == "SGP_SIN_MC1" ~ "Singapore",
office == "GBR_LON_MC1" ~ "Petersfield",
office == "ARE_DXB_MC1" ~ "Abu Dhabi",
office == "CHN_SHA_MC1" ~ "Shangai",
office == "CHN_BJS_MC1" ~ "Beijing",
office == "CHE_BRN_DO1" ~ "Bern",
office == "USA_WAS_MC1" ~ "Washington",
office == "CHE_GVA_MC1" ~ "Geneva",
office == "CAN_YTO_MC1" ~ "Toronto",
TRUE ~ city))) |>
select(-c(office, name)) |>
rename(office = country_description)
df_final <- df |>
filter(!is.na(score),
!response == "Not applicable to my responsibilities or day-to-day work") |>
group_by(email, category) |>
mutate(n = n_distinct(statement),
score_sum = sum(score)) |>
rename(items_applicable = n) |>
ungroup() |>
mutate(score_max_applicable = 2 * items_applicable,
score_final = round(score_sum / score_max_applicable * 100, 0)) |>
distinct(email, category, score_final) |>
ungroup()
not_applicable <- df |>
group_by(email, category) |>
filter(response == "Not applicable to my responsibilities or day-to-day work") |>
count() |>
rename(not_applicable_responses = n) |>
ungroup()
df_final <- left_join(df_final, not_applicable) |>
replace_na(list(not_applicable_responses = 0)) |>
left_join(file_filezilla, by = "email") |>
distinct() |>
filter(!is.na(empid)) |>
mutate(name = gsub("@.*","", email),
name = str_to_title(str_replace(name, "[.]", " ")),
score_category = factor(case_when(score_final <= 40 ~ "Novice",
score_final >= 41 & score_final <= 65 ~ "Competent",
score_final >= 66 & score_final <= 90 ~ "Experienced",
score_final >= 91 ~ "Expert"),
levels = c("Novice", "Competent", "Experienced", "Expert"),
ordered = TRUE),
score_label = paste0(score_final, "%")) |>
select(name, email, category, score = score_final, not_applicable_responses,
score_label, score_category, empid:manager)
file_dna_upload <- write.csv(df_final, file = "dna_report_test.csv")
df_final |> View()
file_dna_upload <- write.csv(df_final, file = "dna_ae_aditi 131221.csv")
drop_upload(file = "dna_ae_aditi 131221.csv")
df_global <- drop_read_csv("dna_ae_aditi 131221.csv") |>
select(-X)
df_global |> View()
office_emails <- c("eyad.zerba@wearemci.com",
"zaid.attawala@mci-group.com",
"soumya.varghese@wearemci.com",
"rithik.aswani@wearemci.com",
"maysa.dabbagh@wearemci.com",
"shruthi.rao@wearemci.com",
"roula.raya@wearemci.com",
"alaa.hosny@wearemci.com",
"valsaraj.kottappurath@wearemci.com",
"anahita.kumar@wearemci.com",
"patrick.colaco@wearemci.com")
df_global |> View()
df <- df_global |>
filter(email %in% office_emails)
# Creating objects --------------------------------------------------------
score_mean_office <- df |>
summarize(score = round(mean(score), 0)) |>
mutate(name = "Average",
score_label = paste0(score, "%"))
# Bar chart
bar_chart <- function(label, width = "100%", height = "14px", fill = "#00bfc4", background = NULL) {
bar <- div(style = list(background = fill, width = width, height = height))
chart <- div(style = list(flexGrow = 1, marginLeft = "6px", background = background), bar)
div(style = list(display = "flex", alignItems = "center"), label, chart)
}
# Font
jost <- list(
family = "Jost",
size = 30,
color = "#444444")
ui <- fluidPage(
titlePanel("The DNA Project - Self-Assessment Results Dashboard"),
sidebarLayout(
sidebarPanel(
h2("Navigation guidelines"),
p("This dashboard presents four tabs:"),
br(),
p(strong("DQ"), "presents the Digital Quotient (DQ) of your office
(average score of all skill categories combined)."),
br(),
p(strong("Office Overview"), "presents the combined results for all
the Project Managers (PMs) part of your office that took the Self-Assessment."),
br(),
p(strong("Results per Talent"), "presents the individual results for all the PMs
part of your office that took the Self-Assessment."),
br(),
p(strong("Bridging Knowledge & Skills Gap"), "presents curated recommendations
to help you level up the competences of your team members."),
br(),
h2("Individual Average Score Guidelines"),
p("The average score that a PM has obtained in the Self-Assessment corresponds to
the following skill/capability levels:"),
tags$li(strong("Novice"), " = 0% - 40%"),
tags$li(strong("Competent"), " = 41% - 65%"),
tags$li(strong("Experienced"), " = 66% - 89%"),
tags$li(strong("Expert"), " = 90% - 100%")
ui <- fluidPage(
titlePanel("The DNA Project - Self-Assessment Results Dashboard"),
sidebarLayout(
sidebarPanel(
h2("Navigation guidelines"),
p("This dashboard presents four tabs:"),
br(),
p(strong("DQ"), "presents the Digital Quotient (DQ) of your office
(average score of all skill categories combined)."),
br(),
p(strong("Office Overview"), "presents the combined results for all
the Project Managers (PMs) part of your office that took the Self-Assessment."),
br(),
p(strong("Results per Talent"), "presents the individual results for all the PMs
part of your office that took the Self-Assessment."),
br(),
p(strong("Bridging Knowledge & Skills Gap"), "presents curated recommendations
to help you level up the competences of your team members."),
br(),
h2("Individual Average Score Guidelines"),
p("The average score that a PM has obtained in the Self-Assessment corresponds to
the following skill/capability levels:"),
tags$li(strong("Novice"), " = 0% - 40%"),
tags$li(strong("Competent"), " = 41% - 65%"),
tags$li(strong("Experienced"), " = 66% - 89%"),
tags$li(strong("Expert"), " = 90% - 100%")
runApp()
runApp()
runApp()
runApp()
df_global <- drop_read_csv("dna_ae_aditi 131221.csv") |>
select(-X)
office_name <- c("eyad.zerba@wearemci.com",
"zaid.attawala@mci-group.com",
"soumya.varghese@wearemci.com",
"rithik.aswani@wearemci.com",
"maysa.dabbagh@wearemci.com",
"shruthi.rao@wearemci.com",
"roula.raya@wearemci.com",
"alaa.hosny@wearemci.com",
"valsaraj.kottappurath@wearemci.com",
"anahita.kumar@wearemci.com",
"patrick.colaco@wearemci.com")
df <- df_global |>
filter(email %in% office_emails)
# Creating objects --------------------------------------------------------
score_mean_office <- df |>
summarize(score = round(mean(score), 0)) |>
mutate(name = "Average",
score_label = paste0(score, "%"))
table_summary <- df |>
group_by(name) |>
summarize(score_final = round(mean(score), 0)) |>
mutate(score_category = factor(case_when(score_final <= 40 ~ "Novice",
score_final >= 41 & score_final <= 65 ~ "Competent",
score_final >= 66 & score_final <= 89 ~ "Experienced",
score_final >= 90 ~ "Expert"),
levels = c("Novice", "Competent", "Experienced", "Expert"),
ordered = TRUE)) |>
count(score_category, .drop = FALSE) |>
mutate(total = sum(n),
perc = round(n / total, 2) * 100,
perc_label = paste(perc, "%")) |>
select(score_category, n, perc_label)
table_summary
df_percent_rank <- df_global |>
group_by(name) |>
summarize(score = round(mean(score), 0)) |>
mutate(percentile = round(percent_rank(score), 2)* 100) |>
ungroup() |>
arrange(desc(percentile))
df_percent_rank
df_category_score <- df_global |>
select(name, emails, office, category, score, not_applicable_responses) |>
pivot_wider(names_from = category, values_from = c(score, not_applicable_responses)) |>
mutate_all(~replace(., is.na(.), 0))
df_global |> glimpse()
df_percent_rank <- df_global |>
group_by(name) |>
summarize(score = round(mean(score), 0)) |>
mutate(percentile = round(percent_rank(score), 2)* 100) |>
ungroup() |>
arrange(desc(percentile))
df_category_score
df_category_score <- df_global |>
select(name, email, office, category, score, not_applicable_responses) |>
pivot_wider(names_from = category, values_from = c(score, not_applicable_responses)) |>
mutate_all(~replace(., is.na(.), 0))
df_category_score
df_table <- df_percent_rank |>
left_join(df_category_score) |>
filter(email == office_name) |>
clean_names() |>
mutate(score_category = factor(case_when(score <= 40 ~ "Novice",
score >= 41 & score <= 65 ~ "Competent",
score >= 66 & score <= 89 ~ "Experienced",
score >= 90 ~ "Expert"),
levels = c("Novice", "Competent", "Experienced", "Expert"),
ordered = TRUE)) |>
select(name, percentile, score, score_category, score_account_management, not_applicable_responses_account_management,
score_consultancy_and_marketing_strategy, not_applicable_responses_consultancy_and_marketing_strategy,
score_operations_management, not_applicable_responses_operations_management,
score_community_management, not_applicable_responses_community_management,
score_creative_and_content_production, not_applicable_responses_creative_and_content_production,
score_financial_management, not_applicable_responses_financial_management)
df_table <- df_percent_rank |>
left_join(df_category_score) |>
filter(email %in% office_name) |>
clean_names() |>
mutate(score_category = factor(case_when(score <= 40 ~ "Novice",
score >= 41 & score <= 65 ~ "Competent",
score >= 66 & score <= 89 ~ "Experienced",
score >= 90 ~ "Expert"),
levels = c("Novice", "Competent", "Experienced", "Expert"),
ordered = TRUE)) |>
select(name, percentile, score, score_category, score_account_management, not_applicable_responses_account_management,
score_consultancy_and_marketing_strategy, not_applicable_responses_consultancy_and_marketing_strategy,
score_operations_management, not_applicable_responses_operations_management,
score_community_management, not_applicable_responses_community_management,
score_creative_and_content_production, not_applicable_responses_creative_and_content_production,
score_financial_management, not_applicable_responses_financial_management)
df_table
# Lowest - Medium - Higher
blue_pal <- function(x) rgb(colorRamp(c("#D7E9F7", "#77ACF1", "#185ADB"))(x), maxColorValue = 255)
brown_pal <- function(x) rgb(colorRamp(c("#FEFBF3", "#F8F0DF", "#9D9D9D"))(x), maxColorValue = 255)
table <- reactable(df_table,
showPageSizeOptions = TRUE,
defaultPageSize = 40,
paginationType = "jump",
searchable = TRUE,
highlight = TRUE)
reactable(df_table,
showPageSizeOptions = TRUE,
defaultPageSize = 40,
paginationType = "jump",
searchable = TRUE,
highlight = TRUE,
columns = list(
name = colDef("Talent", minWidth = 250),
score = colDef("Score",
align = "center",
minWidth = 85),
score_category = colDef("Level",
align = "left",
minWidth = 100),
score_account_management = colDef("Account Management (AM)",
align = "center",
minWidth = 130,
style = function(value) {
normalized <- (value - min(df_table$score_account_management)) / (max(df_table$score_account_management) - min(df_table$score_account_management))
color <- brown_pal(normalized)
list(background = color)
}),
not_applicable_responses_account_management = colDef("NA AM",
align = "center",
minWidth = 65),
score_consultancy_and_marketing_strategy = colDef("Consultancy & Marketing Strategy (C&MS)",
align = "center",
minWidth = 120,
style = function(value) {
normalized <- (value - min(df_table$score_consultancy_and_marketing_strategy)) / (max(df_table$score_score_consultancy_and_marketing_strategy) - min(df_table$score_consultancy_and_marketing_strategy))
color <- brown_pal(normalized)
list(background = color)
}),
not_applicable_responses_consultancy_and_marketing_strategy = colDef("NA C&MS",
align = "center",
minWidth = 65),
score_operations_management = colDef("Operations Management (OM)",
align = "center",
minWidth = 120,
style = function(value) {
normalized <- (value - min(df_table$score_operations_management)) / (max(df_table$score_operations_management) - min(df_table$score_operations_management))
color <- brown_pal(normalized)
list(background = color)
}),
not_applicable_responses_operations_management = colDef("NA OM",
align = "center",
minWidth = 65),
score_community_management = colDef("Community Management (CM)",
align = "center",
minWidth = 120,
style = function(value) {
normalized <- (value - min(df_table$score_community_management)) / (max(df_table$score_community_management) - min(df_table$score_community_management))
color <- brown_pal(normalized)
list(background = color)
}),
not_applicable_responses_community_management = colDef("NA CM",
align = "center",
minWidth = 65),
score_creative_and_content_production = colDef("Creative & Content Production (C&CP)",
align = "center",
minWidth = 120,
style = function(value) {
normalized <- (value - min(df_table$score_creative_and_content_production)) / (max(df_table$score_creative_and_content_production) - min(df_table$score_creative_and_content_production))
color <- brown_pal(normalized)
list(background = color)
}),
not_applicable_responses_creative_and_content_production = colDef("NA C&CP",
align = "center",
minWidth = 65),
score_financial_management = colDef("Financial Management (FM)",
align = "center",
minWidth = 120,
style = function(value) {
normalized <- (value - min(df_table$score_financial_management)) / (max(df_table$score_financial_management) - min(df_table$score_financial_management))
color <- brown_pal(normalized)
list(background = color)
}),
not_applicable_responses_financial_management = colDef("NA FM",
align = "center",
minWidth = 65),
percentile = colDef("Percentile",
align = "center",
minWidth = 90,
style = function(value) {
normalized <- (value - min(df_table$percentile)) / (max(df_table$percentile) - min(df_table$percentile))
color <- blue_pal(normalized)
list(background = color)
})
)
)
runApp()
setwd("~/Desktop/Github/2021-FIDE-World-Chess-Championship")
library(pacman)
p_load(tidyverse, tidytuesdayR, showtext, ggtext)
font_add_google("Lato")
library(pacman)
p_load(tidyverse, bigchess, janitor, reshape2, ggbeeswarm, ggtext, showtext, sysfonts, stringi, readxl, stringr)
font_add_google("Lato")
df_raw <- read.pgn("wch21.pgn") |>
clean_names()
df <- df_raw |>
select(date, round, white, black, result, movetext) |>
mutate(round = is.numeric(round))
moves <- str_extract_all(df$movetext, "[A-Za-z]\\S+") |>
melt(moves, value.name = "move") |>
rename(round = L1) |>
as.data.frame() |>
group_by(round) |>
mutate(move_color = factor(if_else(row_number() %% 2 == 1, "white", "black"),
levels = c("white", "black"), ordered = TRUE),
move_dist_x = if_else(row_number() %% 2 == 1, 1, 1.1),
move_dist_y = as.numeric(rep(1:n(), each =2)[1:n()])) |>
ungroup() |>
mutate(move_capture = str_detect(move, "x"),
move_dist_x_sep = as.numeric(case_when(round == 2 & move_dist_x == 1 ~ 1.3,
round == 2 & move_dist_x == 1.1 ~ 1.4,
round == 3 & move_dist_x == 1 ~ 1.6,
round == 3 & move_dist_x == 1.1 ~ 1.7,
round == 4 & move_dist_x == 1 ~ 1.9,
round == 4 & move_dist_x == 1.1 ~ 2,
round == 5 & move_dist_x == 1 ~ 2.2,
round == 5 & move_dist_x == 1.1 ~ 2.3,
round == 6 & move_dist_x == 1 ~ 2.5,
round == 6 & move_dist_x == 1.1 ~ 2.6,
round == 7 & move_dist_x == 1 ~ 2.8,
round == 7 & move_dist_x == 1.1 ~ 2.9,
round == 8 & move_dist_x == 1 ~ 3.1,
round == 8 & move_dist_x == 1.1 ~ 3.2,
round == 9 & move_dist_x == 1 ~ 3.4,
round == 9 & move_dist_x == 1.1 ~ 3.5,
round == 10 & move_dist_x == 1 ~ 3.7,
round == 10 & move_dist_x == 1.1 ~ 3.8,
round == 11 & move_dist_x == 1 ~ 4,
round == 11 & move_dist_x == 1.1 ~ 4.1,
TRUE ~ move_dist_x)))
# Basic plot --------------------------------------------------------------
plot <- moves |>
ggplot(aes(move_dist_x_sep, move_dist_y, label = move, color = move_color)) +
geom_text(aes(fontface = ifelse(move_capture == TRUE, 2, 1)),
hjust = 0,
size = 1.8,
show.legend = FALSE,
) +
labs(x = NULL,
y = NULL) +
scale_x_continuous(limits = c(1, 4.2),
breaks = seq(1, 4.2, by = 0.1))
plot +
coord_cartesian(clip = "off") +
annotate("segment", x = 1, y = 0, xend = 1.2, yend = 0, color = "black") +
annotate("segment", x = 1.3, y = 0, xend = 1.5, yend = 0, color = "black") +
annotate("segment", x = 1.6, y = 0, xend = 1.8, yend = 0, color = "black") +
annotate("segment", x = 1.9, y = 0, xend = 2.1, yend = 0, color = "black") +
annotate("segment", x = 2.2, y = 0, xend = 2.4, yend = 0, color = "black") +
annotate("segment", x = 2.5, y = 0, xend = 2.7, yend = 0, color = "black") +
annotate("segment", x = 2.8, y = 0, xend = 3, yend = 0, color = "black") +
annotate("segment", x = 3.1, y = 0, xend = 3.3, yend = 0, color = "black") +
annotate("segment", x = 3.4, y = 0, xend = 3.6, yend = 0, color = "black") +
annotate("segment", x = 3.7, y = 0, xend = 3.9, yend = 0, color = "black") +
annotate("segment", x = 4, y = 0, xend = 4.2, yend = 0, color = "black") #+
plot +
coord_cartesian(clip = "off") +
annotate("segment", x = 1, y = 0, xend = 1.2, yend = 0, color = "black") +
annotate("segment", x = 1.3, y = 0, xend = 1.5, yend = 0, color = "black") +
annotate("segment", x = 1.6, y = 0, xend = 1.8, yend = 0, color = "black") +
annotate("segment", x = 1.9, y = 0, xend = 2.1, yend = 0, color = "black") +
annotate("segment", x = 2.2, y = 0, xend = 2.4, yend = 0, color = "black") +
annotate("segment", x = 2.5, y = 0, xend = 2.7, yend = 0, color = "black") +
annotate("segment", x = 2.8, y = 0, xend = 3, yend = 0, color = "black") +
annotate("segment", x = 3.1, y = 0, xend = 3.3, yend = 0, color = "black") +
annotate("segment", x = 3.4, y = 0, xend = 3.6, yend = 0, color = "black") +
annotate("segment", x = 3.7, y = 0, xend = 3.9, yend = 0, color = "black") +
annotate("segment", x = 4, y = 0, xend = 4.2, yend = 0, color = "black") +
scale_color_manual(values = c("white", "black")) +
theme_void(base_family = "Lato") +
theme(
plot.margin = margin(20, 40, 20, 30),
panel.background = element_rect(color = "grey50", fill = "grey50")
)
ggsave("delete.png", width = 10, height = 20, units = "in", dpi = 320)
